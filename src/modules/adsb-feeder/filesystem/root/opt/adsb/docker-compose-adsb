#!/bin/bash

# set up the right config files and then pass the arguments
# on to docker compose

# this needs to run as root
if [ "$(id -u)" != "0" ] ; then
	echo "this command requires superuser privileges - please run as sudo bash $0"
	exit 1
fi

# identify the calling process for better log messages
PARENTPID=$(ps -cp $$ -o ppid="")
if kill -0 "$PARENTPID" &> /dev/null ; then
	# shellcheck disable=SC2086 # the ps -q call fails with quotes around the variable
	PARENTPROC=$(ps -q$PARENTPID -o args=)
	if [[ $PARENTPROC = */opt/adsb/docker-compose-start* ]] ; then
		# this one is special as it's just a pretty wrapper around this script,
		# so instead look for the process that called docker-compose-start
		# shellcheck disable=SC2086 # the ps -p call fails with quotes around the variable
		PARENTPID=$(ps -cp $PARENTPID -o ppid="")
		if kill -0 "$PARENTPID" &> /dev/null ; then
			# shellcheck disable=SC2086 # the ps -q call fails with quotes around the variable
			PARENTPROC=$(ps -q$PARENTPID -o args=)
		else
			PARENTPROC="process $PARENTPID (appears already gone)"
		fi
	fi
else
	PARENTPROC="process $PARENTPID (appears already gone)"
fi
echo "$PARENTPROC called docker-compose-adsb" "$@" >&2

lockFile="/opt/adsb/docker-starting.lock"
if ( set -o noclobber; echo "$@" > "$lockFile") 2> /dev/null; then
	trap 'rm -f "$lockFile"; exit $?' INT TERM EXIT
else
	echo "docker-compose-adsb is already running for $(<$lockFile)" >&2
	# prevent restart loop
	sleep 1."$RANDOM"
	exit
fi

docker_compose="docker compose"
$docker_compose version &> /dev/null || docker_compose="docker-compose"

if grep _ADSBIM_STATE_IS_RADARBOX_ENABLED=True /opt/adsb/config/.env ; then
	# make sure the fake cpuinfo and thermal zone files are setup if needed for RadarBox
	bash /opt/adsb/rb-hack-setup.sh
fi

if grep "_ADSBIM_STATE_IS_BASE_CONFIG_FINISHED=True" /opt/adsb/config/.env > /dev/null 2>&1 ; then
	echo "calling docker compose for the enabled containers"
	source /opt/adsb/default.docker-compose
	cd /opt/adsb/config || echo "config folder is missing?" >&2
	$docker_compose "${COMPOSE_FILES[@]}" "$@"
	if [ "$1" = "up" ] ; then
		# try to figure out if this was successful
		echo "finished attempting to bring up the containers" >&2
		tempfile=$(mktemp)
		$docker_compose "${COMPOSE_FILES[@]}" ps > "$tempfile"
		if ! grep -q ultrafeeder "$tempfile" ; then
			(
				echo "it looks like ultrafeeder didn't come up"
				echo "docker thinks these containers are running:"
				cat "$tempfile"
				echo "docker thinks these networks are defined:"
				docker network ls
			) >&2
		fi
		rm -f "$tempfile"
	fi
else
	echo "things aren't configured, yet, only starting Dozzle and the logger container"
	$docker_compose -f /opt/adsb/config/dozzle.yml "$@"
fi
